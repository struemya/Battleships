
#include <stdio.h>
#include "letters.h"
#include "device_compatibility.h"
#include "ECG_Plot.h"
#include "time.h"


int lastValue = -1;
ECG_PLOT* plot;
short data[] = DATA;
ECG_Point points[] = POINTS;


void timeout()
{
	int samples_per_pixel = ((plot->time_to_show / plot->width) \
			*SAMPLES_PER_SEC) / 1000;
    plot->data->num_samples++;
    if(plot->data->num_samples - plot->last_sample_ploted > samples_per_pixel \
    		* DEFAULT_SHIFT_LENGTH)
    	shift_and_plot(plot);
}

int main() 
{
    int lastx, lasty;

    lastx = lasty = -1;
    consoleDemoInit();


/*************************
  Utilizando Framebuffer
*************************/
    // Configuracion de pantalla principal
    REG_DISPCNT = MODE_FB0 ;      // Framebuffer
    // Configuracion de bloque A de la VRAM
    VRAM_A_CR = VRAM_ENABLE       // Habilitar
      | VRAM_A_LCD ;              // Asignar a LCD



    printf(" \n \
\n \
- 'B' = Clear screen \n \
\n \
- 'A' = Swap screens \n \
\n \
- 'Up' = Increase signal \n \
\n \
- 'Down' = Decrease signal \n \
\n \
\n \
\n");

    plot = init_ECG_Plot(VRAM_A, 200,192,0,0);
    plot->time_to_show = 4000;
    plot->last_sample_ploted = 0;
    plot->data = malloc(sizeof(ECG_Data));
    plot->data->num_samples = 0;
    plot->data->data = data;
    plot->data->points = points;
    plot->data->last_point_showed = 0;
    clear_canvas(plot);



    int freq = 250;
    srand(time(NULL));




//Timer
    irqSet(IRQ_TIMER0, &timeout);
    irqEnable(IRQ_TIMER0);
    TIMER_DATA(0) = TIMER_FREQ_1024(freq);
    TIMER_CR(0) = TIMER_DIV_1024 | TIMER_ENABLE | TIMER_IRQ_REQ;


    for(;;)
    {
	scanKeys();
	if(keysHeld() & KEY_TOUCH) 
	  {
	    touchPosition touch;
	    touchRead(&touch);
	    if(lastx != -1 && (touch.px != 0 && touch.py != 0)) 
	    {
	    	drawLine(plot,lastx,lasty,touch.px,touch.py, RGB15(0,0,0));
	    }
	    lastx = touch.px;
	    lasty = touch.py;
	  } 
      else
	{
	  unsigned key = keysUp();
	  if(key & KEY_A)
	  {
	    lcdSwap();
	  }
	  else if (key & KEY_DOWN)
	  {
		if(plot->time_to_show > 2000)
		{
			REG_IME = 0;
			clear_canvas(plot);
			plot->time_to_show-=1000;
			REG_IME = 1;
			printf("Showing %i seconds of signal\n", plot->time_to_show/1000);
		}
	  }
	  else if (key &	 KEY_UP)
	  {
		if(plot->time_to_show < 6000)
		{
			REG_IME = 0;
			clear_canvas(plot);
			plot->time_to_show+=1000;
			REG_IME = 1;
			printf("Showing %i seconds of signal\n", plot->time_to_show/1000);
		}
	  }
	  else if (key & KEY_LEFT)
	  {

	  }
	  else if (key & KEY_RIGHT)
	  {

	  }
	  else if (key & KEY_B)
	  {
		REG_IME = 0;
	    clear_canvas(plot);
	    REG_IME = 1;
	  }
	  else
	  {
	    lastx = lasty = -1;
	  }
	}
      swiWaitForVBlank();
    }
    return 0;
}
